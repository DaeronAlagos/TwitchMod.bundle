from playlist import M3UPlaylist
import qualities as Qualities
import defs as Defs
# two types of vods: v type vods are hls, c/a type vods are 30min segmented flvs
VOD_DATA         = 'https://api.twitch.tv/kraken/videos/{0}'
HLS_TOKEN_URL    = 'http://api.twitch.tv/api/vods/{0}/access_token'
HLS_PLAYLIST_URL = 'http://usher.twitch.tv/vod/{0}?nauth={1}&nauthsig={2}&allow_source=true'
CHU_PLAYLIST_URL = 'https://api.twitch.tv/api/videos/{0}'

####################################################################################################
def GetVodId(url):

        return url.split('/')[-1]

def GetVodType(url):

        vod_type = url.split('/')[-2]
        # apparently b types need to be changed to a to make api calls (taken from livestreamer twitch plugin)
        if vod_type == "b":
                vod_type = "a" 
        return vod_type

####################################################################################################
def NormalizeURL(url):

        return url.split('?')[0].split('#')[0].rstrip('/')

####################################################################################################
def MetadataObjectForURL(url):

        Log('TWITCH: MetadataObjectForURL - ' + url)
        id = GetVodId(url)
        vod_type = GetVodType(url)
        vod_info_url = VOD_DATA.format(vod_type+id)

        video = JSON.ObjectFromURL(vod_info_url)
        return VideoClipObject(
                title    = video['title'],
                summary  = video['description'],
                thumb    = Resource.ContentsOfURLWithFallback(video['preview']),
                duration = int(video['length'])*1000
        )

####################################################################################################
def MediaObjectsForURL(url):

        Log('TWITCH: MediaObjectsForURL - ' + url)
        vod_id   = GetVodId(url)
        vod_type = GetVodType(url)

        # vod is HLS
        if vod_type == "v":
                if Prefs['enable_vod_quality_selection']:
                        return [
                                MediaObject(
                                        protocol = 'hls',
                                        container = 'mpegts',
                                        video_codec = VideoCodec.H264,
                                        audio_codec = AudioCodec.AAC,
                                        audio_channels = 2,
                                        optimized_for_streaming = True,
                                        video_resolution = Qualities.HLS_RESOLUTIONS[Qualities.HLS_QUALITIES[x]],
                                        parts = [
                                                PartObject(
                                                        key = Callback(PlayVideo, url=url, quality=x)
                                                )
                                        ]
                                ) for x in xrange(len(Qualities.HLS_QUALITIES))
                        ]
                else:
                        return [
                                MediaObject(
                                        protocol = 'hls',
                                        container = 'mpegts',
                                        video_codec = VideoCodec.H264,
                                        audio_codec = AudioCodec.AAC,
                                        audio_channels = 2,
                                        optimized_for_streaming = True,
                                        parts = [
                                                PartObject(
                                                        key = Callback(PlayVideo, url=url)
                                                )
                                        ]
                                )
                        ]

        # vod is in 30min flv segments
        #
        # highlights are given as a start time and end time for the given chunks
        #  I would need to be able to tell plex a position to start and stop playback in order
        #  to show the highlight.
        # For now, just compile the chunks together into a big clip and return that.
        #  (a 20 second highlight video could be 4 hours long when played, but that 20 second
        #   highlight is contained within that 4 hours)
        else:
                mediaObjects = []
                vidChunks = JSON.ObjectFromURL(CHU_PLAYLIST_URL.format(vod_type+vod_id))
                Log("TWITCH: Playlist -" + str(vidChunks))
                chunks = vidChunks['chunks']

                for x in xrange(len(Qualities.CHUNK_QUALITIES)):
                        if Qualities.CHUNK_QUALITIES[x] in chunks:
                                quality = Qualities.CHUNK_QUALITIES[x]
                                vid = MediaObject(
                                        container = 'flv',
                                        video_codec = VideoCodec.H264,
                                        audio_codec = AudioCodec.AAC,
                                        video_resolution = Qualities.CHUNK_RESOLUTIONS[quality]
                                )
                                start_offset = vidChunks['start_offset']
                                end_offset   = vidChunks['end_offset']

                                for chunk in chunks[Qualities.CHUNK_QUALITIES[x]]:
                                        Log("TWITCH: Chunk -" + chunk['url'])
                                        vid.add(PartObject(key=chunk['url'], duration=int(chunk['length'])*1000))

                                mediaObjects.append(vid)


                return mediaObjects
                # example json from CHU_PLAYLIST_URL
                # {
                #     "start_offset": 2907,
                #     "end_offset": 2927,
                #     "duration": 20,
                #     "chunks": {
                #         "live": [ { "length": 1710, "url": "part1.flv" }, { "length": 1710, "url": "part2.flv" } ],
                #         "480p": [ { "length": 1710, "url": "part1.flv" }, { "length": 1710, "url": "part2.flv" } ],
                #     }
                # }

####################################################################################################
@indirect
def PlayVideo(url, quality=0, **kwargs):

        vod_id   = GetVodId(url)
        vod_type = GetVodType(url)
        # get a token
        try:
                token = JSON.ObjectFromURL(HLS_TOKEN_URL.format(vod_id), cacheTime=Defs.TOKEN_TIME)
        except:
                raise Ex.MediaNotAvailable
        # get the playlist with the token
        final_url = HLS_PLAYLIST_URL.format(vod_id, String.Quote(token['token']), String.Quote(token['sig']))

        if Prefs['enable_vod_quality_selection']:
                # get the playlists contents so we can extract the quality we want
                playlist_contents = HTTP.Request(final_url, cacheTime=0).content
                # parse the qualities
                qualities = M3UPlaylist(playlist_contents)
                Log("TWITCH: + " + str(qualities))
                # the address to the m3u8 of the quality we want
                final_url = qualities.getQuality(quality)

        return IndirectResponse(VideoClipObject, key=HTTPLiveStreamURL(final_url))
