from playlist import M3UPlaylist
import qualities as Qualities
# two types of vods: v type vods are hls, c/a type vods are 30min segmented flvs
VOD_DATA         = 'https://api.twitch.tv/kraken/videos/{0}'
HLS_TOKEN_URL    = 'http://api.twitch.tv/api/vods/{0}/access_token'
HLS_PLAYLIST_URL = 'http://usher.twitch.tv/vod/{0}?nauth={1}&nauthsig={2}'
CHU_PLAYLIST_URL = 'https://api.twitch.tv/api/videos/{0}'

####################################################################################################
def GetVodId(url):

        return url.split('/')[-1]

def GetVodType(url):

        return url.split('/')[-2]

####################################################################################################
def NormalizeURL(url):

        return url.split('?')[0].split('#')[0].rstrip('/')

####################################################################################################
def MetadataObjectForURL(url):

        Log('TWITCH: MetadataObjectForURL - ' + url)
        id = GetVodId(url)
        vod_type = GetVodType(url)
        vod_info_url = VOD_DATA.format(vod_type+id)

        video = JSON.ObjectFromURL(vod_info_url)
        return VideoClipObject(
                title    = video['title'],
                summary  = video['description'],
                thumb    = Resource.ContentsOfURLWithFallback(video['preview']),
                duration = int(video['length'])*1000
        )

####################################################################################################
def MediaObjectsForURL(url):

        Log('TWITCH: MediaObjectsForURL - ' + url)
        vod_id   = GetVodId(url)
        vod_type = GetVodType(url)

        # vod is HLS
        if vod_type == "v":

                return [
                        MediaObject(
                                protocol = 'hls',
                                container = 'mpegts',
                                video_codec = VideoCodec.H264,
                                audio_codec = AudioCodec.AAC,
                                audio_channels = 2,
                                optimized_for_streaming = True,
                                video_resolution = Qualities.HLS_RESOLUTIONS[Qualities.HLS_QUALITIES[x]],
                                parts = [
                                        PartObject(
                                                key = Callback(PlayVideo, url=url, quality=x)
                                        )
                                ]
                        ) for x in xrange(len(Qualities.HLS_QUALITIES))
                ]

        # vod is in 30min flv segments
        # slow. I don't know how to properly add the parts with a callback
        # so a request is made for each item that is listed
        else:
                mediaObjects = []
                vidChunks = JSON.ObjectFromURL(CHU_PLAYLIST_URL.format(vod_type+vod_id))
                chunks = vidChunks['chunks']

                for quality in chunks:
                        vid = MediaObject(
                                container = 'flv',
                                video_codec = VideoCodec.H264,
                                audio_codec = AudioCodec.AAC,
                                video_resolution = Qualities.CHUNK_RESOLUTIONS[quality]
                        )
                        for chunk in chunks[quality]:
                                vid.add(PartObject(key=chunk['url']))
                        mediaObjects.append(vid)

                return mediaObjects
                # example json from CHU_PLAYLIST_URL
                # {
                #     "chunks": {
                #         "live": [ { "url": "part1.flv" }, { "url": "part2.flv" } ],
                #         "480p": [ { "url": "part1.flv" }, { "url": "part2.flv" } ],
                #     }
                # }

####################################################################################################
@indirect
def PlayVideo(url, quality=0, **kwargs):

        vod_id   = GetVodId(url)
        vod_type = GetVodType(url)
        # get a token
        try:
                token = JSON.ObjectFromURL(HLS_TOKEN_URL.format(vod_id), cacheTime=0)
        except:
                raise Ex.MediaNotAvailable
        # get the playlist with the token
        playlist_url = HLS_PLAYLIST_URL.format(vod_id, String.Quote(token['token']), String.Quote(token['sig']))
        # get the playlists contents so we can extract the quality we want
        playlist_contents = HTTP.Request(playlist_url, cacheTime=0).content
        # parse the qualities
        qualities = M3UPlaylist(playlist_contents)
        # the address to the m3u8 of the quality we want
        final_url = qualities.getQuality(quality)

        return IndirectResponse(VideoClipObject, key=HTTPLiveStreamURL(final_url))
