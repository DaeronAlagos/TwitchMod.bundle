from playlist import M3UPlaylist
import qualities as Qualities

STREAM_DATA      = 'https://api.twitch.tv/kraken/streams/%s'
HLS_TOKEN_URL    = 'http://api.twitch.tv/api/channels/%s/access_token'
HLS_PLAYLIST_URL = 'http://usher.twitch.tv/api/channel/hls/%s.m3u8?token=%s&sig=%s&allow_source=true'

####################################################################################################
def GetUserId(url):

        return url.split('/')[-1]

####################################################################################################
def NormalizeURL(url):

        return url.split('?')[0].split('#')[0].rstrip('/')

####################################################################################################
def MetadataObjectForURL(url):

        user_id = GetUserId(url)

        try:
                video = JSON.ObjectFromURL(STREAM_DATA % user_id, cacheTime=0)
        except:
                raise Ex.MediaNotAvailable

        if 'stream' not in video or video['stream'] is None:
                raise Ex.LiveMediaNotStarted

        display_name = video['stream']['channel']['display_name']
        game = video['stream']['channel']['game'] if 'game' in video['stream']['channel'] else '?'
        status = video['stream']['channel']['status'] if 'status' in video['stream']['channel'] else ''
        viewers = video['stream']['viewers']
        thumb = video['stream']['preview']['large']

        return VideoClipObject(
                title = '%s - %s' % (display_name, game),
                summary = '%s\n\n%d viewers' % (status, viewers),
                thumb = Resource.ContentsOfURLWithFallback(thumb)
        )

####################################################################################################
def MediaObjectsForURL(url):

        return [
                MediaObject(
                        protocol = 'hls',
                        container = 'mpegts',
                        video_codec = VideoCodec.H264,
                        audio_codec = AudioCodec.AAC,
                        audio_channels = 2,
                        optimized_for_streaming = True,
                        video_resolution = Qualities.HLS_RESOLUTIONS[Qualities.HLS_QUALITIES[x]],
                        parts = [
                                PartObject(
                                        key = Callback(PlayVideo, url=url, quality=x, ext='m3u8')
                                )
                        ]
                ) for x in xrange(len(Qualities.HLS_QUALITIES))
        ]

####################################################################################################
@indirect
def PlayVideo(url, quality=0, **kwargs):

        user_id   = GetUserId(url)

        # get a token
        try:
                token = JSON.ObjectFromURL(HLS_TOKEN_URL % user_id, cacheTime=0)
        except:
                raise Ex.MediaNotAvailable
        # get the playlist with the token
        playlist_url = HLS_PLAYLIST_URL % (user_id, String.Quote(token['token']), String.Quote(token['sig']))
        # get the playlists contents so we can extract the quality we want
        playlist_contents = HTTP.Request(playlist_url, cacheTime=0).content
        # parse the qualities
        qualities = M3UPlaylist(playlist_contents)
        Log("TWITCH: + " + str(qualities))
        # the address to the m3u8 of the quality we want
        final_url = qualities.getQuality(quality)

        return IndirectResponse(VideoClipObject, key=HTTPLiveStreamURL(final_url))
